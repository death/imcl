// Meta TODO: create table and prioritize

// Context creation and access

// Each context create its own ImFontAtlas by default. You may
// instance one yourself and pass it to CreateContext() to share a
// font atlas between imgui contexts.  All those functions are not
// reliant on the current context.
IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);
IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = destroy current context
IMGUI_API ImGuiContext* GetCurrentContext();
IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);
IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert);

// Main

// access the IO structure (mouse/keyboard/gamepad inputs, time,
// various configuration options/flags)
IMGUI_API ImGuiIO&      GetIO();
// access the Style structure (colors, sizes). Always use
// PushStyleCol(), PushStyleVar() to modify style mid-frame.
IMGUI_API ImGuiStyle&   GetStyle();
// start a new Dear ImGui frame, you can submit any command from this
// point until Render()/EndFrame().
IMGUI_API void          NewFrame();
// ends the Dear ImGui frame. automatically called by Render(), you
// likely don't need to call that yourself directly. If you don't need
// to render data (skipping rendering) you may call EndFrame() but
// you'll have wasted CPU already! If you don't need to render, better
// to not create any imgui windows and not call NewFrame() at all!
IMGUI_API void          EndFrame();
// ends the Dear ImGui frame, finalize the draw data. You can get call
// GetDrawData() to obtain it and run your rendering
// function. (Obsolete: this used to call
// io.RenderDrawListsFn(). Nowadays, we allow and prefer calling your
// render function yourself.)
IMGUI_API void          Render();
// valid after Render() and until the next call to NewFrame(). this is
// what you have to render.
IMGUI_API ImDrawData*   GetDrawData();

// Demo, Debug, Information

// create demo/test window (previously called
// ShowTestWindow). demonstrate most ImGui features. call this to
// learn about the library! try to make it always available in your
// application!
IMGUI_API void          ShowDemoWindow(bool* p_open = NULL);
// create about window. display Dear ImGui version, credits and
// build/system information.
IMGUI_API void          ShowAboutWindow(bool* p_open = NULL);
// create metrics/debug window. display Dear ImGui internals: draw
// commands (with individual draw calls and vertices), window list,
// basic internal state, etc.
IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);
// add style editor block (not a window). you can pass in a reference
// ImGuiStyle structure to compare to, revert to and save to (else it
// uses the default style)
IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);
// add style selector block (not a window), essentially a combo
// listing the default styles.
IMGUI_API bool          ShowStyleSelector(const char* label);
// add font selector block (not a window), essentially a combo listing
// the loaded fonts.
IMGUI_API void          ShowFontSelector(const char* label);
// add basic help/info block (not a window): how to manipulate ImGui
// as a end-user (mouse/keyboard controls).
IMGUI_API void          ShowUserGuide();
// get the compiled version string e.g. "1.23" (essentially the
// compiled value for IMGUI_VERSION)
IMGUI_API const char*   GetVersion();

// Styles

// new, recommended style (default)
IMGUI_API void          StyleColorsDark(ImGuiStyle* dst = NULL);
// classic imgui style
IMGUI_API void          StyleColorsClassic(ImGuiStyle* dst = NULL);
// best used with borders and a custom, thicker font
IMGUI_API void          StyleColorsLight(ImGuiStyle* dst = NULL);

// Windows

// - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
// - You may append multiple times to the same window during the same frame.
// - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,
//   which clicking will set the boolean to false when clicked.
// - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
//   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
//   [this is due to legacy reason and is inconsistent with most other functions such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc.
//    where the EndXXX call should only be called if the corresponding BeginXXX function returned true.]
// - Note that the bottom of window stack always contains a window called "Debug".
IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);
IMGUI_API void          End();

// Child Windows

// - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
// - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
// - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
//   Always call a matching EndChild() for each BeginChild() call, regardless of its return value [this is due to legacy reason and is inconsistent with most other functions such as BeginMenu/EndMenu, BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function returned true.]
IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags flags = 0);
IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0,0), bool border = false, ImGuiWindowFlags flags = 0);
IMGUI_API void          EndChild();

// Windows Utilities

// "current window" = the window we are appending into while inside a
// Begin()/End() block. "next window" = next window we will Begin()
// into.
IMGUI_API bool          IsWindowAppearing();
IMGUI_API bool          IsWindowCollapsed();
// is current window focused? or its root/child, depending on flags. see flags for options.
IMGUI_API bool          IsWindowFocused(ImGuiFocusedFlags flags=0);
// is current window hovered (and typically: not blocked by a
// popup/modal)? see flags for options. NB: If you are trying to check
// whether your mouse should be dispatched to imgui or to your app,
// you should use the 'io.WantCaptureMouse' boolean for that! Please
// read the FAQ!
IMGUI_API bool          IsWindowHovered(ImGuiHoveredFlags flags=0);
// get draw list associated to the current window, to append your own
// drawing primitives
IMGUI_API ImDrawList*   GetWindowDrawList();
// get current window position in screen space (useful if you want to
// do your own drawing via the DrawList API)
IMGUI_API ImVec2        GetWindowPos();
// get current window size
IMGUI_API ImVec2        GetWindowSize();
// get current window width (shortcut for GetWindowSize().x)
IMGUI_API float         GetWindowWidth();
// get current window height (shortcut for GetWindowSize().y)
IMGUI_API float         GetWindowHeight();

// Prefer using SetNextXXX functions (before Begin) rather that SetXXX
// functions (after Begin).
//
// set next window position. call before Begin(). use
// pivot=(0.5f,0.5f) to center on given point, etc.
IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0,0));
// set next window size. set axis to 0.0f to force an auto-fit on this
// axis. call before Begin()
IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0);
// set next window size limits. use -1,-1 on either X/Y axis to
// preserve the current size. Use callback to apply non-trivial
// programmatic constraints.
IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL);
// set next window content size (~ enforce the range of
// scrollbars). not including window decorations (title bar, menu bar,
// etc.). set an axis to 0.0f to leave it automatic. call before
// Begin()
IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);
// set next window collapsed state. call before Begin()
IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0);
// set next window to be focused / front-most. call before Begin()
IMGUI_API void          SetNextWindowFocus();
// set next window background color alpha. helper to easily modify
// ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use
// ImGuiWindowFlags_NoBackground.
IMGUI_API void          SetNextWindowBgAlpha(float alpha);
// (not recommended) set current window position - call within
// Begin()/End(). prefer using SetNextWindowPos(), as this may incur
// tearing and side-effects.
IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0);
// (not recommended) set current window size - call within
// Begin()/End(). set to ImVec2(0,0) to force an auto-fit. prefer
// using SetNextWindowSize(), as this may incur tearing and minor
// side-effects.
IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0);
// (not recommended) set current window collapsed state. prefer using
// SetNextWindowCollapsed().
IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0);
// (not recommended) set current window to be focused /
// front-most. prefer using SetNextWindowFocus().
IMGUI_API void          SetWindowFocus();
// set font scale. Adjust IO.FontGlobalScale if you want to scale all
// windows
IMGUI_API void          SetWindowFontScale(float scale);
// set named window position.
IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0);
// set named window size. set axis to 0.0f to force an auto-fit on
// this axis.
IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0);
// set named window collapsed state
IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0);
// set named window to be focused / front-most. use NULL to remove
// focus.
IMGUI_API void          SetWindowFocus(const char* name);

// Content region

// Those functions are bound to be redesigned soon (they are
// confusing, incomplete and return values in local window coordinates
// which increases confusion)
//
// current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates
IMGUI_API ImVec2        GetContentRegionMax();
// == GetContentRegionMax() - GetCursorPos()
IMGUI_API ImVec2        GetContentRegionAvail();
// == GetContentRegionAvail().x
IMGUI_API float         GetContentRegionAvailWidth();
// content boundaries min (roughly (0,0)-Scroll), in window coordinates
IMGUI_API ImVec2        GetWindowContentRegionMin();
// content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates
IMGUI_API ImVec2        GetWindowContentRegionMax();
//
IMGUI_API float         GetWindowContentRegionWidth();

// Windows Scrolling

// get scrolling amount [0..GetScrollMaxX()]
IMGUI_API float         GetScrollX();
// get scrolling amount [0..GetScrollMaxY()]
IMGUI_API float         GetScrollY();
// get maximum scrolling amount ~~ ContentSize.X - WindowSize.X
IMGUI_API float         GetScrollMaxX();
// get maximum scrolling amount ~~ ContentSize.Y - WindowSize.Y
IMGUI_API float         GetScrollMaxY();
// set scrolling amount [0..GetScrollMaxX()]
IMGUI_API void          SetScrollX(float scroll_x);
// set scrolling amount [0..GetScrollMaxY()]
IMGUI_API void          SetScrollY(float scroll_y);
// adjust scrolling amount to make current cursor position
// visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When
// using to make a "default/current item" visible, consider using
// SetItemDefaultFocus() instead.
IMGUI_API void          SetScrollHereY(float center_y_ratio = 0.5f);
// adjust scrolling amount to make given position visible. Generally
// GetCursorStartPos() + offset to compute a valid position.
IMGUI_API void          SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f);

// Parameters stacks (shared)

// use NULL as a shortcut to push default font
IMGUI_API void          PushFont(ImFont* font);
IMGUI_API void          PopFont();
IMGUI_API void          PushStyleColor(ImGuiCol idx, ImU32 col);
IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);
IMGUI_API void          PopStyleColor(int count = 1);
IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);
IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);
IMGUI_API void          PopStyleVar(int count = 1);
// retrieve style color as stored in ImGuiStyle structure. use to feed
// back into PushStyleColor(), otherwise use GetColorU32() to get
// style color with style alpha baked in.
IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);
// get current font
IMGUI_API ImFont*       GetFont();
// get current font size (= height in pixels) of current font with
// current scale applied
IMGUI_API float         GetFontSize();
// get UV coordinate for a while pixel, useful to draw custom shapes
// via the ImDrawList API
IMGUI_API ImVec2        GetFontTexUvWhitePixel();
// retrieve given style color with style alpha applied and optional
// extra alpha multiplier
IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);
// retrieve given color with style alpha applied
IMGUI_API ImU32         GetColorU32(const ImVec4& col);
// retrieve given color with style alpha applied
IMGUI_API ImU32         GetColorU32(ImU32 col);

// Parameters stacks (current window)

// set width of items for common large "item+label" widgets. >0.0f:
// width in pixels, <0.0f align xx pixels to the right of window (so
// -1.0f always align width to the right side). 0.0f = default to ~2/3
// of windows width,
IMGUI_API void          PushItemWidth(float item_width);
IMGUI_API void          PopItemWidth();
// set width of the _next_ common large "item+label" widget. >0.0f:
// width in pixels, <0.0f align xx pixels to the right of window (so
// -1.0f always align width to the right side)
IMGUI_API void          SetNextItemWidth(float item_width);
// width of item given pushed settings and current cursor position
IMGUI_API float         CalcItemWidth();
// word-wrapping for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap
// to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position
// in window local space
IMGUI_API void          PushTextWrapPos(float wrap_local_pos_x = 0.0f);
IMGUI_API void          PopTextWrapPos();
// allow focusing using TAB/Shift-TAB, enabled by default but you can
// disable it for certain widgets
IMGUI_API void          PushAllowKeyboardFocus(bool allow_keyboard_focus);
IMGUI_API void          PopAllowKeyboardFocus();
// in 'repeat' mode, Button*() functions return repeated true in a
// typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate
// setting). Note that you can call IsItemActive() after any Button()
// to tell if the button is held in the current frame.
IMGUI_API void          PushButtonRepeat(bool repeat);
IMGUI_API void          PopButtonRepeat();

// Cursor / Layout

// - By "cursor" we mean the current output position.
// - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.

// separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
IMGUI_API void          Separator();
// call between widgets or groups to layout them horizontally. X position given in window coordinates.
IMGUI_API void          SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f);
// undo a SameLine() or force a new line when in an horizontal-layout context.
IMGUI_API void          NewLine();
// add vertical spacing.
IMGUI_API void          Spacing();
// add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
IMGUI_API void          Dummy(const ImVec2& size);
// move content position toward the right, by style.IndentSpacing or indent_w if != 0
IMGUI_API void          Indent(float indent_w = 0.0f);
// move content position back to the left, by style.IndentSpacing or indent_w if != 0
IMGUI_API void          Unindent(float indent_w = 0.0f);
// lock horizontal starting position
IMGUI_API void          BeginGroup();
// unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
IMGUI_API void          EndGroup();
// cursor position in window coordinates (relative to window position)
IMGUI_API ImVec2        GetCursorPos();
//   (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.
IMGUI_API float         GetCursorPosX();
//    other functions such as GetCursorScreenPos or everything in ImDrawList::
IMGUI_API float         GetCursorPosY();
//    are using the main, absolute coordinate system.
IMGUI_API void          SetCursorPos(const ImVec2& local_pos);
//    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)
IMGUI_API void          SetCursorPosX(float local_x);
//
IMGUI_API void          SetCursorPosY(float local_y);
// initial cursor position in window coordinates
IMGUI_API ImVec2        GetCursorStartPos();
// cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
IMGUI_API ImVec2        GetCursorScreenPos();
// cursor position in absolute screen coordinates [0..io.DisplaySize]
IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);
// vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
IMGUI_API void          AlignTextToFramePadding();
// ~ FontSize
IMGUI_API float         GetTextLineHeight();
// ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
IMGUI_API float         GetTextLineHeightWithSpacing();
// ~ FontSize + style.FramePadding.y * 2
IMGUI_API float         GetFrameHeight();
// ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
IMGUI_API float         GetFrameHeightWithSpacing();

// ID stack/scopes

// - Read the FAQ for more details about how ID are handled in dear imgui. If you are creating widgets in a loop you most
//   likely want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
// - The resulting ID are hashes of the entire stack.
// - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
// - In this header file we use the "label"/"name" terminology to denote a string that will be displayed and used as an ID,
//   whereas "str_id" denote a string that is only used as an ID and not normally displayed.

// push string into the ID stack (will hash string).
IMGUI_API void          PushID(const char* str_id);
// push string into the ID stack (will hash string).
IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);
// push pointer into the ID stack (will hash pointer).
IMGUI_API void          PushID(const void* ptr_id);
// push integer into the ID stack (will hash integer).
IMGUI_API void          PushID(int int_id);
// pop from the ID stack.
IMGUI_API void          PopID();
// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
IMGUI_API ImGuiID       GetID(const char* str_id);
IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);
IMGUI_API ImGuiID       GetID(const void* ptr_id);

// Widgets: Text

// raw text without formatting. Roughly equivalent to Text("%s", text)
// but: A) doesn't require null terminated string if 'text_end' is
// specified, B) it's faster, no memory copy is done, no buffer size
// limits, recommended for long chunks of text.
IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL);
// simple formatted text
IMGUI_API void          Text(const char* fmt, ...)                                      IM_FMTARGS(1);
IMGUI_API void          TextV(const char* fmt, va_list args)                            IM_FMTLIST(1);
// shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...);
// PopStyleColor();
IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...)            IM_FMTARGS(2);
IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args)  IM_FMTLIST(2);
// shortcut for PushStyleColor(ImGuiCol_Text,
// style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...);
// PopStyleColor();
IMGUI_API void          TextDisabled(const char* fmt, ...)                              IM_FMTARGS(1);
IMGUI_API void          TextDisabledV(const char* fmt, va_list args)                    IM_FMTLIST(1);
// shortcut for PushTextWrapPos(0.0f); Text(fmt, ...);
// PopTextWrapPos();. Note that this won't work on an auto-resizing
// window if there's no other widgets to extend the window width, yoy
// may need to set a size using SetNextWindowSize().
IMGUI_API void          TextWrapped(const char* fmt, ...)                               IM_FMTARGS(1);
IMGUI_API void          TextWrappedV(const char* fmt, va_list args)                     IM_FMTLIST(1);
// display text+label aligned the same way as value+label widgets
IMGUI_API void          LabelText(const char* label, const char* fmt, ...)              IM_FMTARGS(2);
IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args)    IM_FMTLIST(2);
// shortcut for Bullet()+Text()
IMGUI_API void          BulletText(const char* fmt, ...)                                IM_FMTARGS(1);
IMGUI_API void          BulletTextV(const char* fmt, va_list args)                      IM_FMTLIST(1);

// Widgets: Main

// - Most widgets return true when the value has been changed or when pressed/selected

// button
IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0,0));
// button with FramePadding=(0,0) to easily embed within text
IMGUI_API bool          SmallButton(const char* label);
// button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size);
// square button with an arrow shape
IMGUI_API bool          ArrowButton(const char* str_id, ImGuiDir dir);
IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0));
// <0 frame_padding uses default frame padding settings. 0 for no padding
IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0),  const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1));
IMGUI_API bool          Checkbox(const char* label, bool* v);
IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);
// use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
IMGUI_API bool          RadioButton(const char* label, bool active);
// shortcut to handle the above pattern when value is an integer
IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);
IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-1,0), const char* overlay = NULL);
// draw a small circle and keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
IMGUI_API void          Bullet();

// Widgets: Combo Box

// - The new BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose.

IMGUI_API bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);
// only call EndCombo() if BeginCombo() returns true!
IMGUI_API void          EndCombo();
IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);
// Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);
IMGUI_API bool          Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);

// Widgets: Drags

// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).

// If v_min >= v_max we have no bound
IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, float power = 1.0f);
// If v_min >= v_max we have no bound
IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d");
IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d");
IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d");
IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d");
IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL);
IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* v, float v_speed, const void* v_min = NULL, const void* v_max = NULL, const char* format = NULL, float power = 1.0f);
IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* v, int components, float v_speed, const void* v_min = NULL, const void* v_max = NULL, const char* format = NULL, float power = 1.0f);

// Widgets: Sliders

// - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.

// adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display. Use power!=1.0 for power curve sliders
IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg");
IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d");
IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = "%d");
IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = "%d");
IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = "%d");
IMGUI_API bool          SliderScalar(const char* label, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format = NULL, float power = 1.0f);
IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format = NULL, float power = 1.0f);
IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", float power = 1.0f);
IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d");
IMGUI_API bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* v, const void* v_min, const void* v_max, const char* format = NULL, float power = 1.0f);

// Widgets: Input with Keyboard

// - If you want to use InputText() with a dynamic string type such as std::string or your own, see misc/cpp/imgui_stdlib.h
// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.

IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0,0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* v, const void* step = NULL, const void* step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* step = NULL, const void* step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);

// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little colored preview square that can be left-clicked to open a picker, and right-clicked to open an option menu.)

// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);
IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);
// display a colored square/button, hover for details, return true when pressed.
IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0,0));
// initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);

// Widgets: Trees
// - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
IMGUI_API bool          TreeNode(const char* label);
// helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().
IMGUI_API bool          TreeNode(const char* str_id, const char* fmt, ...) IM_FMTARGS(2);
IMGUI_API bool          TreeNode(const void* ptr_id, const char* fmt, ...) IM_FMTARGS(2);
IMGUI_API bool          TreeNodeV(const char* str_id, const char* fmt, va_list args) IM_FMTLIST(2);
IMGUI_API bool          TreeNodeV(const void* ptr_id, const char* fmt, va_list args) IM_FMTLIST(2);
IMGUI_API bool          TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0);
IMGUI_API bool          TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
IMGUI_API bool          TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
IMGUI_API bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
IMGUI_API bool          TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
// ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.
IMGUI_API void          TreePush(const char* str_id);
IMGUI_API void          TreePush(const void* ptr_id = NULL);
// ~ Unindent()+PopId()
IMGUI_API void          TreePop();
// advance cursor x position by GetTreeNodeToLabelSpacing()
IMGUI_API void          TreeAdvanceToLabelPos();
// horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode
IMGUI_API float         GetTreeNodeToLabelSpacing();
// set next TreeNode/CollapsingHeader open state.
IMGUI_API void          SetNextTreeNodeOpen(bool is_open, ImGuiCond cond = 0);
// if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
IMGUI_API bool          CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0);
// when 'p_open' isn't NULL, display an additional small close button on upper right of the header
IMGUI_API bool          CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags = 0);

// Widgets: Selectables

// - A selectable highlights when hovered, and can display another color when selected.
// - Neighbors selectable extend their highlight bounds in order to leave no gap between them.

// "bool selected" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height
IMGUI_API bool          Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0));
// "bool* p_selected" point to the selection state (read-write), as a convenient helper.
IMGUI_API bool          Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0,0));

// Widgets: List Boxes

// - FIXME: To be consistent with all the newer API, ListBoxHeader/ListBoxFooter should in reality be called BeginListBox/EndListBox. Will rename them.

IMGUI_API bool          ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items = -1);
IMGUI_API bool          ListBox(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items = -1);
// use if you want to reimplement ListBox() will custom data or interactions. if the function return true, you can output elements then call ListBoxFooter() afterwards.
IMGUI_API bool          ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0,0));
IMGUI_API bool          ListBoxHeader(const char* label, int items_count, int height_in_items = -1);
// terminate the scrolling region. only call ListBoxFooter() if ListBoxHeader() returned true!
IMGUI_API void          ListBoxFooter();

// Widgets: Data Plotting

IMGUI_API void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));
IMGUI_API void          PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));
IMGUI_API void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));
IMGUI_API void          PlotHistogram(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));

// Widgets: Value() Helpers.

// - Those are merely shortcut to calling Text() with a format string. Output single value in "name: value" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)

IMGUI_API void          Value(const char* prefix, bool b);
IMGUI_API void          Value(const char* prefix, int v);
IMGUI_API void          Value(const char* prefix, unsigned int v);
IMGUI_API void          Value(const char* prefix, float v, const char* float_format = NULL);

// Widgets: Menus

// create and append to a full screen menu-bar.
IMGUI_API bool          BeginMainMenuBar();
// only call EndMainMenuBar() if BeginMainMenuBar() returns true!
IMGUI_API void          EndMainMenuBar();
// append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
IMGUI_API bool          BeginMenuBar();
// only call EndMenuBar() if BeginMenuBar() returns true!
IMGUI_API void          EndMenuBar();
// create a sub-menu entry. only call EndMenu() if this returns true!
IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);
// only call EndMenu() if BeginMenu() returns true!
IMGUI_API void          EndMenu();
// return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment
IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);
// return true when activated + toggle (*p_selected) if p_selected != NULL
IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);

// Tooltips

// begin/append a tooltip window. to create full-featured tooltip (with any kind of items).
IMGUI_API void          BeginTooltip();
IMGUI_API void          EndTooltip();
// set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().
IMGUI_API void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1);
IMGUI_API void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);

// Popups, Modals

// The properties of popups windows are:
// - They block normal mouse hovering detection outside them. (*)
// - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
// - Their visibility state (~bool) is held internally by imgui instead of being held by the programmer as we are used to with regular Begin() calls.
//   User can manipulate the visibility state by calling OpenPopup().
// (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even when normally blocked by a popup.
// Those three properties are connected. The library needs to hold their visibility state because it can close popups at any time.

// call to mark popup as open (don't call every frame!). popups are closed when user click outside, or if CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block. By default, Selectable()/MenuItem() are calling CloseCurrentPopup(). Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).
IMGUI_API void          OpenPopup(const char* str_id);
// return true if the popup is open, and you can start outputting to it. only call EndPopup() if BeginPopup() returns true!
IMGUI_API bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0);
// helper to open and begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, int mouse_button = 1);
// helper to open and begin popup when clicked on current window.
IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, int mouse_button = 1, bool also_over_items = true);
// helper to open and begin popup when clicked in void (where there are no imgui windows).
IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, int mouse_button = 1);
// modal dialog (regular window with title bar, block interactions behind the modal window, can't close the modal window by clicking outside)
IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);
// only call EndPopup() if BeginPopupXXX() returns true!
IMGUI_API void          EndPopup();
// helper to open popup when clicked on last item (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors). return true when just opened.
IMGUI_API bool          OpenPopupOnItemClick(const char* str_id = NULL, int mouse_button = 1);
// return true if the popup is open at the current begin-ed level of the popup stack.
IMGUI_API bool          IsPopupOpen(const char* str_id);
// close the popup we have begin-ed into. clicking on a MenuItem or Selectable automatically close the current popup.
IMGUI_API void          CloseCurrentPopup();

// Columns

// - You can also use SameLine(pos_x) to mimic simplified columns.
// - The columns API is work-in-progress and rather lacking (columns are arguably the worst part of dear imgui at the moment!)

IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);
// next column, defaults to current row or next row if the current row is finished
IMGUI_API void          NextColumn();
// get current column index
IMGUI_API int           GetColumnIndex();
// get column width (in pixels). pass -1 to use current column
IMGUI_API float         GetColumnWidth(int column_index = -1);
// set column width (in pixels). pass -1 to use current column
IMGUI_API void          SetColumnWidth(int column_index, float width);
// get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
IMGUI_API float         GetColumnOffset(int column_index = -1);
// set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
IMGUI_API void          SetColumnOffset(int column_index, float offset_x);
IMGUI_API int           GetColumnsCount();

// Tab Bars, Tabs

// [BETA API] API may evolve!

// create and append into a TabBar
IMGUI_API bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0);
// only call EndTabBar() if BeginTabBar() returns true!
IMGUI_API void          EndTabBar();
// create a Tab. Returns true if the Tab is selected.
IMGUI_API bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0);
// only call EndTabItem() if BeginTabItem() returns true!
IMGUI_API void          EndTabItem();
// notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);

// Logging/Capture

// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.

// start logging to tty (stdout)
IMGUI_API void          LogToTTY(int auto_open_depth = -1);
// start logging to file
IMGUI_API void          LogToFile(int auto_open_depth = -1, const char* filename = NULL);
// start logging to OS clipboard
IMGUI_API void          LogToClipboard(int auto_open_depth = -1);
// stop logging (close file, etc.)
IMGUI_API void          LogFinish();
// helper to display buttons for logging to tty/file/clipboard
IMGUI_API void          LogButtons();
// pass text data straight to log (without being displayed)
IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);

// Drag and Drop

// [BETA API] API may evolve!

// call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()
IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);
// type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.
IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);
// only call EndDragDropSource() if BeginDragDropSource() returns true!
IMGUI_API void          EndDragDropSource();
// call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
IMGUI_API bool                  BeginDragDropTarget();
// accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
IMGUI_API const ImGuiPayload*   AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);
// only call EndDragDropTarget() if BeginDragDropTarget() returns true!
IMGUI_API void                  EndDragDropTarget();
// peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.
IMGUI_API const ImGuiPayload*   GetDragDropPayload();

// Clipping

IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);
IMGUI_API void          PopClipRect();

// Focus, Activation

// - Prefer using "SetItemDefaultFocus()" over "if (IsWindowAppearing()) SetScrollHereY()" when applicable to signify "this is the default item

// make last item the default focused item of a window.
IMGUI_API void          SetItemDefaultFocus();
// focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
IMGUI_API void          SetKeyboardFocusHere(int offset = 0);

// Item/Widgets Utilities

// - Most of the functions are referring to the last/previous item we submitted.
// - See Demo Window under "Widgets->Querying Status" for an interactive visualization of most of those functions.

// is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
IMGUI_API bool          IsItemHovered(ImGuiHoveredFlags flags = 0);
// is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
IMGUI_API bool          IsItemActive();
// is the last item focused for keyboard/gamepad navigation?
IMGUI_API bool          IsItemFocused();
// is the last item clicked? (e.g. button/node just clicked on) == IsMouseClicked(mouse_button) && IsItemHovered()
IMGUI_API bool          IsItemClicked(int mouse_button = 0);
// is the last item visible? (items may be out of sight because of clipping/scrolling)
IMGUI_API bool          IsItemVisible();
// did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
IMGUI_API bool          IsItemEdited();
// was the last item just made active (item was previously inactive).
IMGUI_API bool          IsItemActivated();
// was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.
IMGUI_API bool          IsItemDeactivated();
// was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
IMGUI_API bool          IsItemDeactivatedAfterEdit();
// is any item hovered?
IMGUI_API bool          IsAnyItemHovered();
// is any item active?
IMGUI_API bool          IsAnyItemActive();
// is any item focused?
IMGUI_API bool          IsAnyItemFocused();
// get upper-left bounding rectangle of the last item (screen space)
IMGUI_API ImVec2        GetItemRectMin();
// get lower-right bounding rectangle of the last item (screen space)
IMGUI_API ImVec2        GetItemRectMax();
// get size of last item
IMGUI_API ImVec2        GetItemRectSize();
// allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.
IMGUI_API void          SetItemAllowOverlap();

// Miscellaneous Utilities

// test if rectangle (of given size, starting from cursor position) is visible / not clipped.
IMGUI_API bool          IsRectVisible(const ImVec2& size);
// test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.
IMGUI_API bool          IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max);
// get global imgui time. incremented by io.DeltaTime every frame.
IMGUI_API double        GetTime();
// get global imgui frame count. incremented by 1 every frame.
IMGUI_API int           GetFrameCount();
// this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.
IMGUI_API ImDrawList*   GetBackgroundDrawList();
// this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.
IMGUI_API ImDrawList*   GetForegroundDrawList();
// you may use this when creating your own ImDrawList instances.
IMGUI_API ImDrawListSharedData* GetDrawListSharedData();
// get a string corresponding to the enum value (for display, saving, etc.).
IMGUI_API const char*   GetStyleColorName(ImGuiCol idx);
// replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)
IMGUI_API void          SetStateStorage(ImGuiStorage* storage);
IMGUI_API ImGuiStorage* GetStateStorage();
IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);
// calculate coarse clipping for large list of evenly sized items. Prefer using the ImGuiListClipper higher-level helper if you can.
IMGUI_API void          CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);
// helper to create a child window / scrolling region that looks like a normal widget frame
IMGUI_API bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags = 0);
// always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)
IMGUI_API void          EndChildFrame();

// Color Utilities

IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);
IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);
IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);
IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);

// Inputs Utilities

// map ImGuiKey_* values into user's key index. == io.KeyMap[key]
IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);
// is key being held. == io.KeysDown[user_key_index]. note that imgui doesn't know the semantic of each entry of io.KeysDown[]. Use your own indices/enums according to how your backend/engine stored them into io.KeysDown[]!
IMGUI_API bool          IsKeyDown(int user_key_index);
// was key pressed (went from !Down to Down). if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);
// was key released (went from Down to !Down)..
IMGUI_API bool          IsKeyReleased(int user_key_index);
// uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate);
// is mouse button held (0=left, 1=right, 2=middle)
IMGUI_API bool          IsMouseDown(int button);
// is any mouse button held
IMGUI_API bool          IsAnyMouseDown();
// did mouse button clicked (went from !Down to Down) (0=left, 1=right, 2=middle)
IMGUI_API bool          IsMouseClicked(int button, bool repeat = false);
// did mouse button double-clicked. a double-click returns false in IsMouseClicked(). uses io.MouseDoubleClickTime.
IMGUI_API bool          IsMouseDoubleClicked(int button);
// did mouse button released (went from Down to !Down)
IMGUI_API bool          IsMouseReleased(int button);
// is mouse dragging. if lock_threshold < -1.0f uses io.MouseDraggingThreshold
IMGUI_API bool          IsMouseDragging(int button = 0, float lock_threshold = -1.0f);
// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);
// by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse
IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);
// shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
IMGUI_API ImVec2        GetMousePos();
// retrieve backup of mouse position at the time of opening popup we have BeginPopup() into
IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();
// return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once. If lock_threshold < -1.0f uses io.MouseDraggingThreshold.
IMGUI_API ImVec2        GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f);
//
IMGUI_API void          ResetMouseDragDelta(int button = 0);
// get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
IMGUI_API ImGuiMouseCursor GetMouseCursor();
// set desired cursor type
IMGUI_API void          SetMouseCursor(ImGuiMouseCursor type);
// attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard_value"; after the next NewFrame() call.
IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);
// attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse_value;" after the next NewFrame() call.
IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);

// Clipboard Utilities (also see the LogToClipboard() function to capture or output text data to the clipboard)

IMGUI_API const char*   GetClipboardText();
IMGUI_API void          SetClipboardText(const char* text);

// Settings/.Ini Utilities

// - The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").
// - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.

// call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
IMGUI_API void          LoadIniSettingsFromDisk(const char* ini_filename);
// call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0);
// this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
IMGUI_API void          SaveIniSettingsToDisk(const char* ini_filename);
// return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
IMGUI_API const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL);

// Memory Allocators

// - All those functions are not reliant on the current context.
// - If you reload the contents of imgui.cpp at runtime, you may need to call SetCurrentContext() + SetAllocatorFunctions() again because we use global storage for those.

IMGUI_API void          SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_func)(void* ptr, void* user_data), void* user_data = NULL);
IMGUI_API void*         MemAlloc(size_t size);
IMGUI_API void          MemFree(void* ptr);
