// Meta TODO: create table and prioritize

// Small tasks
//
//   Context creation and access
//   Clipping
//
// Medium tasks
//
//   Main
//   Parameters stacks (shared)
//   ID stacks/scopes
//   Widgets: Main
//   Widgets: Drags
//   Widgets: Color Editor/Picker
//   Widgets: Data Plotting
//   Popups, Modals
//   Tab Bars, Tabs
//   Logging/Capture
//   Drag and Drop
//   Color Utilities
//
// Large tasks
//
//   Windows Utilities
//   Widgets: Input with Keyboard
//   Widgets: Trees
//   Miscellaneous Utilities
//   Inputs Utilities
//

// ------------------------------------------------------------------------------------------------------------------------

// Context creation and access

// Each context create its own ImFontAtlas by default. You may
// instance one yourself and pass it to CreateContext() to share a
// font atlas between imgui contexts.  All those functions are not
// reliant on the current context.
IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);
IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = destroy current context
IMGUI_API ImGuiContext* GetCurrentContext();
IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);
IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert);

// Main

// access the IO structure (mouse/keyboard/gamepad inputs, time,
// various configuration options/flags)
IMGUI_API ImGuiIO&      GetIO();
// access the Style structure (colors, sizes). Always use
// PushStyleCol(), PushStyleVar() to modify style mid-frame.
IMGUI_API ImGuiStyle&   GetStyle();
// start a new Dear ImGui frame, you can submit any command from this
// point until Render()/EndFrame().
IMGUI_API void          NewFrame();
// ends the Dear ImGui frame. automatically called by Render(), you
// likely don't need to call that yourself directly. If you don't need
// to render data (skipping rendering) you may call EndFrame() but
// you'll have wasted CPU already! If you don't need to render, better
// to not create any imgui windows and not call NewFrame() at all!
IMGUI_API void          EndFrame();
// ends the Dear ImGui frame, finalize the draw data. You can get call
// GetDrawData() to obtain it and run your rendering
// function. (Obsolete: this used to call
// io.RenderDrawListsFn(). Nowadays, we allow and prefer calling your
// render function yourself.)
IMGUI_API void          Render();
// valid after Render() and until the next call to NewFrame(). this is
// what you have to render.
IMGUI_API ImDrawData*   GetDrawData();

// Windows Utilities

// "current window" = the window we are appending into while inside a
// Begin()/End() block. "next window" = next window we will Begin()
// into.
// get draw list associated to the current window, to append your own
// drawing primitives
IMGUI_API ImDrawList*   GetWindowDrawList();

// Prefer using SetNextXXX functions (before Begin) rather that SetXXX
// functions (after Begin).
//
// set next window size limits. use -1,-1 on either X/Y axis to
// preserve the current size. Use callback to apply non-trivial
// programmatic constraints.
IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL);

// Parameters stacks (shared)

// use NULL as a shortcut to push default font
IMGUI_API void          PushFont(ImFont* font);
IMGUI_API void          PopFont();
// retrieve style color as stored in ImGuiStyle structure. use to feed
// back into PushStyleColor(), otherwise use GetColorU32() to get
// style color with style alpha baked in.
IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);
// get current font
IMGUI_API ImFont*       GetFont();
// get current font size (= height in pixels) of current font with
// current scale applied
IMGUI_API float         GetFontSize();
// get UV coordinate for a while pixel, useful to draw custom shapes
// via the ImDrawList API
IMGUI_API ImVec2        GetFontTexUvWhitePixel();
// retrieve given style color with style alpha applied and optional
// extra alpha multiplier
IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);
// retrieve given color with style alpha applied
IMGUI_API ImU32         GetColorU32(const ImVec4& col);
// retrieve given color with style alpha applied
IMGUI_API ImU32         GetColorU32(ImU32 col);

// ID stack/scopes

// - Read the FAQ for more details about how ID are handled in dear imgui. If you are creating widgets in a loop you most
//   likely want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
// - The resulting ID are hashes of the entire stack.
// - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
// - In this header file we use the "label"/"name" terminology to denote a string that will be displayed and used as an ID,
//   whereas "str_id" denote a string that is only used as an ID and not normally displayed.

// push string into the ID stack (will hash string).
IMGUI_API void          PushID(const char* str_id);
// push string into the ID stack (will hash string).
IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);
// push pointer into the ID stack (will hash pointer).
IMGUI_API void          PushID(const void* ptr_id);
// push integer into the ID stack (will hash integer).
IMGUI_API void          PushID(int int_id);
// pop from the ID stack.
IMGUI_API void          PopID();
// calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
IMGUI_API ImGuiID       GetID(const char* str_id);
IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);
IMGUI_API ImGuiID       GetID(const void* ptr_id);

// Widgets: Main

// - Most widgets return true when the value has been changed or when pressed/selected

IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0));
// <0 frame_padding uses default frame padding settings. 0 for no padding
IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0,0),  const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1));

// Widgets: Drags

// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).

IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, float power = 1.0f);
IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL);
IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* v, float v_speed, const void* v_min = NULL, const void* v_max = NULL, const char* format = NULL, float power = 1.0f);
IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* v, int components, float v_speed, const void* v_min = NULL, const void* v_max = NULL, const char* format = NULL, float power = 1.0f);

// Widgets: Input with Keyboard

// - If you want to use InputText() with a dynamic string type such as std::string or your own, see misc/cpp/imgui_stdlib.h
// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.

IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0,0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
IMGUI_API bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* v, const void* step = NULL, const void* step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* step = NULL, const void* step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);

// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little colored preview square that can be left-clicked to open a picker, and right-clicked to open an option menu.)

// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);
IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);
// display a colored square/button, hover for details, return true when pressed.
IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0,0));
// initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);

// Widgets: Trees
// - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.
IMGUI_API bool          TreeNode(const char* label);
// helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().
IMGUI_API bool          TreeNode(const char* str_id, const char* fmt, ...) IM_FMTARGS(2);
IMGUI_API bool          TreeNode(const void* ptr_id, const char* fmt, ...) IM_FMTARGS(2);
IMGUI_API bool          TreeNodeV(const char* str_id, const char* fmt, va_list args) IM_FMTLIST(2);
IMGUI_API bool          TreeNodeV(const void* ptr_id, const char* fmt, va_list args) IM_FMTLIST(2);
IMGUI_API bool          TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0);
IMGUI_API bool          TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
IMGUI_API bool          TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);
IMGUI_API bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
IMGUI_API bool          TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);
// ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.
IMGUI_API void          TreePush(const char* str_id);
IMGUI_API void          TreePush(const void* ptr_id = NULL);
// ~ Unindent()+PopId()
IMGUI_API void          TreePop();
// advance cursor x position by GetTreeNodeToLabelSpacing()
IMGUI_API void          TreeAdvanceToLabelPos();
// horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode
IMGUI_API float         GetTreeNodeToLabelSpacing();
// set next TreeNode/CollapsingHeader open state.
IMGUI_API void          SetNextTreeNodeOpen(bool is_open, ImGuiCond cond = 0);
// if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().
IMGUI_API bool          CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0);
// when 'p_open' isn't NULL, display an additional small close button on upper right of the header
IMGUI_API bool          CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags = 0);

// Widgets: Data Plotting

IMGUI_API void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));
IMGUI_API void          PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));
IMGUI_API void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));
IMGUI_API void          PlotHistogram(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));

// Popups, Modals

// The properties of popups windows are:
// - They block normal mouse hovering detection outside them. (*)
// - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
// - Their visibility state (~bool) is held internally by imgui instead of being held by the programmer as we are used to with regular Begin() calls.
//   User can manipulate the visibility state by calling OpenPopup().
// (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even when normally blocked by a popup.
// Those three properties are connected. The library needs to hold their visibility state because it can close popups at any time.

// call to mark popup as open (don't call every frame!). popups are closed when user click outside, or if CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block. By default, Selectable()/MenuItem() are calling CloseCurrentPopup(). Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).
IMGUI_API void          OpenPopup(const char* str_id);
// return true if the popup is open, and you can start outputting to it. only call EndPopup() if BeginPopup() returns true!
IMGUI_API bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0);
// helper to open and begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, int mouse_button = 1);
// helper to open and begin popup when clicked on current window.
IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, int mouse_button = 1, bool also_over_items = true);
// helper to open and begin popup when clicked in void (where there are no imgui windows).
IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, int mouse_button = 1);
// modal dialog (regular window with title bar, block interactions behind the modal window, can't close the modal window by clicking outside)
IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);
// only call EndPopup() if BeginPopupXXX() returns true!
IMGUI_API void          EndPopup();
// helper to open popup when clicked on last item (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors). return true when just opened.
IMGUI_API bool          OpenPopupOnItemClick(const char* str_id = NULL, int mouse_button = 1);
// return true if the popup is open at the current begin-ed level of the popup stack.
IMGUI_API bool          IsPopupOpen(const char* str_id);
// close the popup we have begin-ed into. clicking on a MenuItem or Selectable automatically close the current popup.
IMGUI_API void          CloseCurrentPopup();

// Logging/Capture

// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.

// start logging to tty (stdout)
IMGUI_API void          LogToTTY(int auto_open_depth = -1);
// start logging to file
IMGUI_API void          LogToFile(int auto_open_depth = -1, const char* filename = NULL);
// start logging to OS clipboard
IMGUI_API void          LogToClipboard(int auto_open_depth = -1);
// stop logging (close file, etc.)
IMGUI_API void          LogFinish();
// helper to display buttons for logging to tty/file/clipboard
IMGUI_API void          LogButtons();
// pass text data straight to log (without being displayed)
IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);

// Drag and Drop

// [BETA API] API may evolve!

// call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()
IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);
// type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.
IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);
// only call EndDragDropSource() if BeginDragDropSource() returns true!
IMGUI_API void          EndDragDropSource();
// call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
IMGUI_API bool                  BeginDragDropTarget();
// accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
IMGUI_API const ImGuiPayload*   AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);
// only call EndDragDropTarget() if BeginDragDropTarget() returns true!
IMGUI_API void                  EndDragDropTarget();
// peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.
IMGUI_API const ImGuiPayload*   GetDragDropPayload();

// Clipping

IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);
IMGUI_API void          PopClipRect();

// Miscellaneous Utilities

// test if rectangle (of given size, starting from cursor position) is visible / not clipped.
IMGUI_API bool          IsRectVisible(const ImVec2& size);
// test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.
IMGUI_API bool          IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max);
// get global imgui time. incremented by io.DeltaTime every frame.
IMGUI_API double        GetTime();
// get global imgui frame count. incremented by 1 every frame.
IMGUI_API int           GetFrameCount();
// this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.
IMGUI_API ImDrawList*   GetBackgroundDrawList();
// this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.
IMGUI_API ImDrawList*   GetForegroundDrawList();
// you may use this when creating your own ImDrawList instances.
IMGUI_API ImDrawListSharedData* GetDrawListSharedData();
// get a string corresponding to the enum value (for display, saving, etc.).
IMGUI_API const char*   GetStyleColorName(ImGuiCol idx);
// replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)
IMGUI_API void          SetStateStorage(ImGuiStorage* storage);
IMGUI_API ImGuiStorage* GetStateStorage();
IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);
// calculate coarse clipping for large list of evenly sized items. Prefer using the ImGuiListClipper higher-level helper if you can.
IMGUI_API void          CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);
// helper to create a child window / scrolling region that looks like a normal widget frame
IMGUI_API bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags = 0);
// always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)
IMGUI_API void          EndChildFrame();

// Color Utilities

IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);
IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);
IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);
IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);

// Inputs Utilities

// map ImGuiKey_* values into user's key index. == io.KeyMap[key]
IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);
// is key being held. == io.KeysDown[user_key_index]. note that imgui doesn't know the semantic of each entry of io.KeysDown[]. Use your own indices/enums according to how your backend/engine stored them into io.KeysDown[]!
IMGUI_API bool          IsKeyDown(int user_key_index);
// was key pressed (went from !Down to Down). if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);
// was key released (went from Down to !Down)..
IMGUI_API bool          IsKeyReleased(int user_key_index);
// uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate);
// is mouse button held (0=left, 1=right, 2=middle)
IMGUI_API bool          IsMouseDown(int button);
// is any mouse button held
IMGUI_API bool          IsAnyMouseDown();
// did mouse button clicked (went from !Down to Down) (0=left, 1=right, 2=middle)
IMGUI_API bool          IsMouseClicked(int button, bool repeat = false);
// did mouse button double-clicked. a double-click returns false in IsMouseClicked(). uses io.MouseDoubleClickTime.
IMGUI_API bool          IsMouseDoubleClicked(int button);
// did mouse button released (went from Down to !Down)
IMGUI_API bool          IsMouseReleased(int button);
// is mouse dragging. if lock_threshold < -1.0f uses io.MouseDraggingThreshold
IMGUI_API bool          IsMouseDragging(int button = 0, float lock_threshold = -1.0f);
// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);
// by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse
IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);
// shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
IMGUI_API ImVec2        GetMousePos();
// retrieve backup of mouse position at the time of opening popup we have BeginPopup() into
IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();
// return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once. If lock_threshold < -1.0f uses io.MouseDraggingThreshold.
IMGUI_API ImVec2        GetMouseDragDelta(int button = 0, float lock_threshold = -1.0f);
//
IMGUI_API void          ResetMouseDragDelta(int button = 0);
// get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
IMGUI_API ImGuiMouseCursor GetMouseCursor();
// set desired cursor type
IMGUI_API void          SetMouseCursor(ImGuiMouseCursor type);
// attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard_value"; after the next NewFrame() call.
IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);
// attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse_value;" after the next NewFrame() call.
IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);
